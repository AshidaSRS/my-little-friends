#! /usr/bin/env bash

# Prerequisites: xml_grep from http://www.xmltwig.com/. On
# Debian/Ubuntu, the packages is called xml-twig-tools.

# Usage: Go to some diretory in your Maven tree, and do:
# create-all-maven-dependencies-defined.sh
#
# It will traverse all trunk POMs from your current directory and
# down, creating three things:

# 1) a file with all Maven dependencies in all the trunk projects it
# found
# 
# 2) a file with statistics of how many times the different
# dependencies are used.
#
# 3) a file with all the dependencies found formatted and wrapped in a
# Maven dependency management block.
#
# echo feedback > tkj@vizrt.com

file=/tmp/$(basename $(pwd))-all-dependencies.xml
echo "" > $file

# can be run in //depot/escenic
find . -name pom.xml | grep trunk | egrep -v "osl|dhk|target" | \
    while read f; do
    management_path=dependencyManagement/dependencies/dependency
    dependency_path=dependencies/dependency

    echo "<!-- dependency management in $f -->" >> $file
    # since xml_grep lists comments on their own line, we can filter
    # them out here.
    cat $f | \
        xml_grep --cond project/${management_path} | \
        grep -v "<!--" \
        >> $file

    echo "<!-- defined versions in $f -->" >> $file
    # since xml_grep lists comments on their own line, we can filter
    # them out here.
    cat $f | \
        xml_grep --cond project/${dependency_path} | \
        grep -v "<!--" \
        >> $file
done

# (1) first, remove <?xml/> and <xml_grep/>
# (2) remove scope elements
# (3) put each dependency on its own line
# (4) remove escenic dependencies and dependencies using build
#     variables local to the Escenic build environment.
# (5) remove scopes (no, <scope>.*</scope> doesn't work as it will
#     remove too much if there's more than one scopeed dependency).
# (6) we're only interested in dependencies which themselves are not
#     referring toa parent version definition or a dependency with
#     version management.
cp $file $file.old
cat $file | \
    grep -v "<?xml" | \
    grep -v "xml_grep"  | \
    tr '\n' ' ' | sed "s#>[ ]*<#><#g" | \
    sed "s#/dependency><#/dependency>\n<#g" | \
    grep -v "com.escenic" | \
    grep -v '\$' | \
    sed "s#<scope>provided</scope>##g" | \
    sed "s#<scope>test</scope>##g" | \
    sed "s#<scope>run</scope>##g" | \
    sed "s#<scope>compile</scope>##g" | \
    sed "s#^[ ]*##g" | \
    egrep "<version>|<!--|-->" \
    > $file.tmp
mv $file.tmp $file

# statistics
cat $file | \
    sed "s#><#::#g" | \
    sed "s#</groupId::artifactId>#::#g" | \
    sed "s#<dependency::groupId>##g" | \
    sed "s#</artifactId::version>#::#g" | \
    cut -d'<' -f1 | \
    grep [a-z] | \
    sort | \
    uniq -c | \
    sort -nr \
    > ${file}.stats

echo "<dependencyManagement><dependencies>" > ${file}.tmp
sort ${file} | uniq >> ${file}.tmp
echo "</dependencies></dependencyManagement>" >> ${file}.tmp
xmllint --format ${file}.tmp > ${file}.pom

echo "All dependencies: ${file}"
echo "Statistics: ${file}.stats"
echo "Dependency management you can add to your POM: ${file}.pom"
