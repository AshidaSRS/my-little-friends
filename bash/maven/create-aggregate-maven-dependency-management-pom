#! /usr/bin/env bash

# Prerequisites: xml_grep from http://www.xmltwig.com/. On
# Debian/Ubuntu, the packages is called xml-twig-tools.

# Usage: Go to some diretory in your Maven tree, and do:
# create-all-maven-dependencies-defined.sh
#
# It will traverse all trunk POMs from your current directory and
# down, creating three things:

# 1) a file with all Maven dependencies in all the trunk projects it
# found
# 
# 2) a file with statistics of how many times the different
# dependencies are used.
#
# 3) a file with all the dependencies found formatted and wrapped in a
# Maven dependency management block.
#
# echo feedback > tkj@conduct.no

file=/tmp/$(basename $(pwd))-all-dependencies.xml
echo "" > $file

# can be run in //depot/escenic
find . -name pom.xml | grep trunk | egrep -v "osl|dhk|target" | \
    while read f; do
    management_path=dependencyManagement/dependencies/dependency
    dependency_path=dependencies/dependency
    plugin_dependency_path=build/plugins/plugin/dependencies/dependency

    echo "<!-- dependency management in $f -->" >> $file
    cat $f | \
        xml_grep --nowrap --cond project/${management_path} \
        >> $file

    echo "<!-- defined versions in $f -->" >> $file
    cat $f | \
        xml_grep --nowrap --cond project/${dependency_path} \
        >> $file
    
    echo "<!-- build dependency versions defined in $f -->" >> $file
    cat $f | \
        xml_grep --nowrap --cond project/${plugin_dependency_path} \
        >> $file
done

function remove_xml_pre_amble() {
    echo $(cat $1 | grep -v "<?xml")
}

function remove_all_white_space_i_dont_want() {
    echo $(echo "$@" | sed "s#>[ ]*<#><#g")
}

function put_each_dependency_on_its_own_line() {
    # must wrap in quotes to preservce whitespace
    echo "$(echo "${@}" | \
            sed 's#/dependency><#/dependency>\n<#g' | \
            sed 's#--><dependency>#-->\n<dependency>#g' | \
            sed 's#--><\!--#-->\n<\!--#g'
          )"
}
    
function remove_scope_elements() {
    echo $(echo "$@" | \
        sed "s#<scope>provided</scope>##g" | \
        sed "s#<scope>test</scope>##g" | \
        sed "s#<scope>run</scope>##g" | \
        sed "s#<scope>compile</scope>##g")
}

# we're only interested in dependencies which themselves are not
# referring toa parent version definition or a dependency with version
# management. Therefore we filter on the <version/> tag and in order
# to do that, we must make sure that comments end on their own line
# (above the the next line).
function get_the_dependencies_we_want() {
    echo "$@" | \
        grep -v "com.escenic" | \
        grep -v '\$' | \
        egrep "<version>|<!--"
}

result=$(remove_xml_pre_amble $file)
result=$(remove_all_white_space_i_dont_want $result)
result=$(remove_scope_elements $result)
result=$(put_each_dependency_on_its_own_line $result)
get_the_dependencies_we_want "$result" > ${file}

# statistics
cat $file | \
    sed "s#><#::#g" | \
    sed "s#</groupId::artifactId>#::#g" | \
    sed "s#<dependency::groupId>##g" | \
    sed "s#</artifactId::version>#::#g" | \
    cut -d'<' -f1 | \
    grep [a-z] | \
    sort | \
    uniq -c | \
    sort -nr \
    > ${file}.stats

echo "<dependencyManagement><dependencies>" > ${file}.tmp
cat ${file} | sort | uniq >> ${file}.tmp
echo "</dependencies></dependencyManagement>" >> ${file}.tmp

# remove our own comments,they're still available in the .xml file.
xmllint --format ${file}.tmp | grep -v "<\!--" > ${file}.pom

echo "Dependency management you can add to your POM: ${file}.pom"
echo "Statistics: ${file}.stats"
echo "All dependencies (raw, with pointers to where they come from): ${file}"
s="Be sure to check out these dependencies, they have duplicate versions:"
duplicates=$(cat ${file}.stats | \
    cut -d':' -f1-3 | \
    cut -d' ' -f8- | \
    uniq -d -c | \
    sort -r | \
    grep [a-z])
if [ -n "${duplicates}" ]; then
    echo $s
    echo -e "${duplicates}"

    echo "" >> ${file}.stats
    echo $s >> ${file}.stats
    echo -e "${duplicates}" >> ${file}.stats
fi

    
    
