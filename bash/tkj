#! /usr/bin/env bash

# by torstein.k.johansen@gmail.com

. $HOME/src/my-little-friends/bash/alexandria

function do_test-url()
{
    local headers="$(
        wget --quiet \
            --server-response \
            --header='Accept-Encoding: gzip,deflate' \
            $1 \
            2>&1 >/dev/null
    )"
    
    if [ $(echo "$headers" | grep "Set-Cookie" | wc -l) -gt 0 ]; then
        print "Cache-ability: not ok"
    else
        print "Cache-ability: ok"
    fi
    
    if [ $(echo "$headers" | grep "Content-Encoding: gzip" | wc -l) -gt 0 ]; then
        print "Compression:   ok"
    else
        print "Compression:   not ok"
    fi
    
    print "Response headers:"
    echo "$headers"
}

function do_help()
{
    print "$(basename $0) supports these commands:"
    declare | grep ^"do_" | cut -d' ' -f1 | cut -d'_' -f2 | while read f; do
        echo "  *" $f
    done
}

function do_daily()
{
    print "Putting on some good music ..."
    mpd 1>/dev/null 2>/dev/null &
    # mpc play 1>/dev/null 2>/dev/null &

    # set up the network
    if [ $(ping -c 1 vg.no 2>/dev/null | grep received | wc -l) -eq 0 ]; then
        print "Enter your root password to set up the network"
        su -c "bash /home/torstein/src/my-little-friends/bash/tkj-ifupd"
    fi

    if [ $(/sbin/ifconfig | grep tun0 -A 1 | grep inet | wc -l) -lt 1 ]; then
        TERM=rxvt-color phionvpn
    fi

    if [ $(ssh-add -l | grep -v "no identities" | wc -l) -lt 1 ]; then
        print "Adding your SSH key"
        ssh-add
    fi
    
    print "Setting a random wallpaper..."
    set_random_wallpaper &

    # the applications that requirethe network to work
    print "Launching my favourite applications..."
    app_list="
opera
pidgin
emacs
icedove
firefox
"
    for el in $app_list; do
        if [ $(ps aux | grep  $el | grep -v grep | wc -l) -lt 1 ]; then
            if [ $el = "emacs" ]; then
                # emacs -fn 7x14 -f gnus &
                bash ~/src/my-little-friends/bash/create-emacs-file-cache
                print "Replacing ~/.emacs.d/file_cache.el ..."
                run cp /tmp/file_cache.el-`date --iso` ~/.emacs.d/file_cache.el

                print "Updaging GTags ..."
                run cd ~/src/p4
                find /usr/lib/jvm/java-6-sun/src . -type f | \
                    grep trunk | \
                    grep trunk | \
                    egrep -v "dhk|osl|target" | \
                    egrep ".java|.xml|.pom|.properties" | \
                    egrep -v ".svn|.git|.hg|~|.swp" | \
                    gtags -f -

                print "Updating ETags ..."
                (
                    run cd ~/src/ece-scripts
                    find usr -type f | grep bin | grep -v local | etags -
                    run cd ~/src/my-little-friends
                    find bash -type f | etags -
                )
                
                emacs-snapshot-lucid -fn 7x14 ~/doc/work.org &
            else
                $el 1>/dev/null 2>/dev/null &
            fi
        fi
    done

    echo -n $id "Start of the day: Getting, building & deploying the latest code"
    echo "..."
    update_sources

    print "Happy hacking :-)"
}

function do_update-sources()
{
    local p4_dir_list="
    "

    local dir=/usr/local/src
    local git_repo_list="
      $dir/malabar-mode
      $dir/nvidiabl
      $dir/org-mode
      $dir/html5-el
      $dir/html5-syntax
      $dir/gnome-shell-extensions-pidgin
      $dir/ajc-java-complete
    "

    local git_fork_list="
      $HOME/src/forks/ece-scripts
    "

    local bzr_repo_list="
      $dir/vm-8.2.x
      $dir/screenkey
    "

    local seperator="=============================================================="

    # check out the latest of everything interesting
    for el in $p4_dir_list; do
        print $seperator
        print "Updating $el/..."
        p4 sync $el/...
        exit_on_error "p4 sync $el"
    done

    for el in $git_repo_list; do
        print $seperator
        print "Updating $(basename $el) ..."
        cd $el
        git pull
    done

    for el in $git_fork_list; do
        print $seperator
        print "Updating fork $(basename $el) ..."
        cd $el
        git fetch upstream
        git merge upstream/master
        git push
    done
    
    for el in $bzr_repo_list; do
        print $seperator
        print "Updating $(basename $el) ..."
        cd $el
        bzr up
    done
}

function do_delete-cache-files()
{
    local dir_list="
      $HOME/.opera/cache
      $HOME/.mozilla/firefox/1tznm2xo.default/Cache
      $HOME/.java/deployment/cache/6.0
      $HOME/.cache/google-chrome
    "

    for el in $dir_list; do
        if [ -d $el ]; then
            rm -r $el
        fi
    done
}

function do_dates()
{
    echo -n "Sidney:    "
    TZ='Australia/Sydney' date
    echo -n "Taipei:    "
    TZ='Asia/Taipei' date
    echo -n "Bangkok:   "
    TZ='Asia/Bangkok' date
    echo -n "Dhaka:     "
    TZ='Asia/Dhaka' date
    echo -n "Oslo:      "
    TZ='Europe/Oslo' date
    echo -n "Argentina: "
    TZ='America/Argentina/Buenos_Aires' date
}

function do_hours()
{
    local started_working_string=$(grep $(date --iso) \
        ~/.bash_eternal_history \
        | head -1 \
        | cut -d' ' -f6-8
    )
    
    local seconds_worked=$((
            $(date +%s) -
            $(date +%s -d "$started_working_string") ))
    local days=$(( seconds_worked / ( 60 * 60 * 24 ) ))
    local seconds_left=$(( seconds_worked - ( $days * 60 * 60 * 24 ) ))
    local hours=$(( seconds_left / ( 60 * 60 ) ))
    local seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    local minutes=$(( seconds_left / 60 ))
    local seconds_left=$(( seconds_left - $minutes * 60 ))

    # echo "It's" ${hours}h ${minutes}m ${seconds_left}s \
    # "since you started working today."$'\n' \
    echo "|" $(date --iso) \
        "|" $(date -d "$started_working_string" +%H:%M) \
        "->" \
        $(date +%H:%M) \
        "| and probably some lunch |" \
        ${hours}$(echo "scale=2;" $minutes / 60 | bc -l)" hours" \
        "|"
}

function do_go-home()
{
    local hlhyw=$(how_long_have_you_worked)
    echo $hlhyw >> ~/doc/hours.org
    print $hlhyw
    
    print "End of the day, generating report ..."
    make_dir $HOME/.widt
    local file=$HOME/.widt/$(date --iso).html
    $HOME/bin/widt > $file
    opera $file
    print "You may go home now :-)"
}

function do_search-im()
{
    logs_dir=$HOME/.purple/logs
    dirs="$logs_dir/jabber/torsteinkrausework@gmail.com/
          $logs_dir/msn/torsteinkrausework@msn.com/
          $logs_dir/irc/torstein@catbert.escenic.com/    
    "
    for dir in $dirs; do
        find $dir -name "*.txt" | xargs grep -n -i --color $1
    done
}

function so_search-mailing-list-archive()
{
    dir=$HOME/mail/mailing-list-archive
    url="http://lists.escenic.com"

    find $dir -name "*.html" | \
        grep -i /[0-9]*.html$ | \
        xargs grep -A 2 -i $1 | \
        sed "s#${dir}#http\:\/#g" | \
        sed "s#html:#html #g"

    local result_html=/tmp/search-results.html
    echo "" > $result_html
    
    find $dir -name "*.html" | \
        grep -i /[0-9]*.html$ | \
        xargs grep -A 2 -i $1 | while read f; do
        sed "s#${dir}#<p><a href='http\:\/#g" | \
            sed "s#html:#html'>link</a></p>#g" \
            >> ${result_html}
    done
    opera ${result_html}
}

function open_jira_issue()
{
    opera https://jira.vizrt.com/browse/${1}
}

function search_otrs()
{
    url="http://otrs.escenic.com/otrs/index.pl"
    session_header_file=/tmp/`basename $0`-$USER-otrs.cookie

    otrs_user=`cat $HOME/.otrs | grep user | cut -d'=' -f2`
    otrs_password=`cat $HOME/.otrs | grep pass | cut -d'=' -f2`
    
    if [ -r $session_header_file ]; then
        session_header=`cat $session_header_file`
    else
        session_header=`wget -S -O /dev/null \
            --post-data "Action=Login&RequestedURL=&Lang=en&User=$otrs_user&Password=$otrs_password" \
            $url |& \
            grep Set-Cookie | \
            cut -d':' -f2 | \
            cut -d';' -f1`
        echo $session_header > $session_header_file
    fi

    current_year=`date +%Y`
    last_year=$(( $current_year - 1 ))

    uri_parameters=`wget -O -\
         --post-data "Action=AgentTicketSearch&Subaction=Search&TicketNumber=$1&CustomerID=&CustomerUserLogin=&From=&To=&Cc=&Subject=&Body=&TicketFreeText2=&TicketFreeText4=&TicketFreeText6=&TimeSearchType=&TicketCreateTimePointStart=Last&TicketCreateTimePoint=1&TicketCreateTimePointFormat=day&TicketCreateTimeStartMonth=12&TicketCreateTimeStartDay=5&TicketCreateTimeStartYear=$last_year&TicketCreateTimeStopMonth=1&TicketCreateTimeStopDay=4&TicketCreateTimeStopYear=$this_year&ResultForm=Normal&Profile=" \
         --header "Cookie: ${session_header}" \
         $url \
         2>/dev/null | \
         grep $1 | \
         cut -d'"' -f2 | \
         cut -d'?' -f2`
    opera "$url/?$uri_parameters"
}

function do_play-that-music()
{
    mpc clear
    
    for el in $@; do
        if [ $el = "music" ]; then
            continue
        fi

        mpc add $el
    done

    mpc shuffle
    mpc play
}

function p4_check_that_everythings_ok()
{
    find . -type f -name "*" | grep -v target | grep -v easybook | grep -v iml$ | \
        while read f; do
        p4 filelog $f 1>/dev/null
    done
}

function do_set-random-wallpaper()
{
    wallpaper_names=$(ls ~/pictures/wallpapers/*.jpg)
    wallpaper_array=($wallpaper_names)
    number_of_wallpapers=${#wallpaper_array[*]}
    wallpaper=${wallpaper_array[$((RANDOM % number_of_wallpapers))]}
    display -window root -backdrop $wallpaper
}

# try to be smart first
if [  `echo $1 | sed 's/[0-9]//g' | wc -c` -lt 2 ]; then
    search_otrs $1
    exit 0
elif [ `echo $1 | egrep -v -i "VIZIWYG|ECOME|VF|STATS|DASH|ERDQ|FORUM|TM" | wc -c` -lt 1 ]; then
    open_jira_issue $1
    exit 0
fi

function unknown_command()
{
    print "I don't know the command '${1}' :-("
    exit 1
}

fn=do_${1}
declare > /dev/null -f "$fn" || unknown_command "$1"
${fn} ${@:2} 
 

exit 0

#    print $seperator
#    print "Pulling from viziwyg/trunk -> branch/plugins-inpage-dnd-poc"
#    p4 integrate -b plugins-inpage-poc
#    p4 resolve -at

# $HOME/src/p4/escenic/plugins/community
# $HOME/src/p4/escenic/plugins/forum
# $HOME/src/p4/escenic/plugins/dashboard
# $HOME/src/p4/escenic/plugins/viziwyg
# $HOME/src/p4/escenic/plugins/poll
# $HOME/src/p4/escenic/plugins/analysis
# $HOME/src/p4/main/tip-manager

