#! /usr/bin/env bash

# alexandria - a great libary full of useful BASH functions that are
# indespensible to me when programming.

# by torstein.k.johansen@gmail.com

if [ -z "$log_dir" ]; then
    log_dir=/tmp
fi

log=${log_dir}/$(basename $0).log

# this directory will normally be /var/run for scripts run as
# priveleged users.
if [ -z "$pid_dir" ]; then
    pid_dir=/tmp
fi

pid_file=$pid_dir/$(basename $0).pid
touch $pid_file

function remove_pid_and_exit()
{
    if [ -w $pid_file ]; then
        rm $pid_file
    fi
    
    exit 0
}


function log()
{
    local id="[$(basename $0)-$(date +%Y-%m-%d-%H:%M:%S)]"
    echo ${id} "$@" >> $log
}


function exit_on_error()
{
    if [ $? -gt 0 ]; then
        print "The command ["$@"] FAILED, exiting :-("
        print "See $log for further details."
        exit 1
    fi
}

# Command wrapper which will exit if the command passed to it
# fails. Output and errors are written to the $log file.
function run()
{
    $@ 1>>$log 2>>$log
    exit_on_error $@
}

function get_id()
{
    timestamp=$(get_seconds_since_start)
    echo "[$(basename $0)-${timestamp}]"
}

function debug()
{
    if [[ -n $debug &&  $debug -eq 1 ]]; then
        echo "[$(basename $0)-debug]" "$@"
    fi
}

function print()
{
    echo "$(get_id)" "$@"
}

function hello_on_you()
{
    echo hello
}

function a-new-one() {
    echo hello
}

function get_seconds_since_start()
{
    now=`date +%s`
    started=`stat -c %Y $pid_file`
    seconds=$(( now - started ))
    echo "$seconds"
}

function make_dir()
{
    if [ ! -d $1 ]; then
        run mkdir -p $1
    fi
}

function make_ln()
{
    if [ $2 ]; then
        if [ -e $1 -a ! -h $2 ]; then
            run ln -s $1 $2
        elif [ ! -e $1 ]; then
            print "Tried to make a symlink to $1, but it doesn't exist"
            exit 1
        fi
    else
        if [ -e $1 -a ! -h $(basename $1) ]; then
            run ln -s $1
        elif [ ! -e $1 ]; then
            print "Tried to make a symlink to $1, but it doesn't exist"
            exit 1
        fi
    fi
}

function clean_up()
{
    rm $pid_file
}

# Returns the file (can be a directory) passed to the function only
# if it's the actual file/directory and not a link to it. If the
# passed file is a link, the link target is returned instead.
#
# $1 - the file (which could be a link)
function get_actual_file()
{
    if [ -h ${1} ]; then
        dir=$(dirname $1)
        real_file=$(ls -l ${1} | awk '{print $11}')

        # Because of the test if the file we want to returns is
        # absolute, we go to the root before testing. We want to
        # preserve the cwd, therefore, we're doing the "cd /" in a
        # subshell.
        real_file=$(
            cd / 
            if [ ! -e ${real_file} ]; then
                real_file=${dir}/${real_file}
            fi

            # this is the return value from the sub process
            echo ${real_file}
        )
    else
        real_file=${1}
    fi
    
    echo ${real_file}
}

# Will first run mvn in offline mode. If it fails, it will re-run
# maven in online mode. This will make Maven feel faster for most
# developers.
#
# mvn_fast will also pass a number of options to mvn that are
# typically used to make the building/packaging go faster, again from
# the developer's point of view. If you're building a release package
# of your Maven project, you don't want to use mvn_fast.
#
# The method will run the second maven call (when applicable) in the
# run() wrapper, exciting the process with an error if it fails.
function mvn_fast()
{
    mvn_opts="
--quiet
-Dtest=false
-DfailIfNoTests=false
-Ddocumentation.skip=true"

    /usr/bin/mvn -o ${mvn_opts} "$@" 1>>$log 2>>$log
    
    if [ $? -gt 0 ]; then
        /usr/bin/mvn ${mvn_opts} "$@"
    fi
}

# returns a string of asterixes with the same lenght as the inputted
# string.
function get_asterixes()
{
    s=""
    j=$(echo $1 | wc -c)

    # wc -c always returns the length + 1, hence we start on index=1
    for (( i=1; i<$j; i++ )); do
        s=${s}"@"
    done
    echo "$s"
}

function get_length()
{
    echo $(( $(echo $1 | wc -c) - 1 ))
}

## Returns 1 if the passed argument is a number, 0 if not.
## $1: the value you wish to test.
function is_number()
{
    for (( i = 0; i < ${#1}; i++ )); do
        if [ $(echo ${1:$i:1} | grep [0-9] | wc -l) -lt 1 ]; then
            echo 0
            return
        fi
    done
    
    echo 1
}

